{"version":3,"sources":["store/actions/actionsTypes.js","store/actions/actions.js","components/Weather/Weather.js","store/actions/weather.js","utils/errorHandler.js","App.js","reportWebVitals.js","store/initialState.js","store/store.js","store/reducers/weatherData.js","index.js"],"names":["WEATHER_FETCH_DATA_TODAY_SUCCESS","WEATHER_FETCH_DATA_WEEK_SUCCESS","WEATHER_FETCH_IS_START","WEATHER_FETCH_ERROR","weatherDataTodaySuccess","today","type","weatherDataWeekSuccess","week","isFetchStart","boolean","isFetchError","error","Weather","getWeatherCity","event","preventDefault","props","fetchData","searchInput","value","optionsDate","day","month","year","className","onSubmit","this","ref","input","Math","round","main","temp","feels_like","weather","icon","description","wind","speed","humidity","pressure","map","index","Date","dt_txt","toLocaleString","Component","connect","state","dispatch","url","fetch","then","res","status","Error","json","weatherData","list","filter","includes","finally","catch","err","errorNum","errorHandler","message","weatherFetchDataToday","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ecc16ba.chunk.js","sourcesContent":["export const WEATHER_FETCH_DATA_TODAY_SUCCESS = \"WEATHER_FETCH_DATA_TODAY_SUCCESS\";\r\nexport const WEATHER_FETCH_DATA_WEEK_SUCCESS = \"WEATHER_FETCH_DATA_WEEK_SUCCESS\";\r\nexport const WEATHER_FETCH_IS_START = \"WEATHER_FETCH_IS_START\";\r\nexport const WEATHER_FETCH_ERROR = \"WEATHER_FETCH_ERROR\";\r\n","import {\r\n    WEATHER_FETCH_DATA_TODAY_SUCCESS, \r\n    WEATHER_FETCH_DATA_WEEK_SUCCESS,\r\n    WEATHER_FETCH_IS_START,\r\n    WEATHER_FETCH_ERROR\r\n} from './actionsTypes'\r\n\r\nexport function weatherDataTodaySuccess(today) {\r\n    return {\r\n        type: WEATHER_FETCH_DATA_TODAY_SUCCESS,\r\n        today: today\r\n    };\r\n}\r\n\r\nexport function weatherDataWeekSuccess(week) {\r\n    return {\r\n        type: WEATHER_FETCH_DATA_WEEK_SUCCESS,\r\n        week: week\r\n    };\r\n}\r\n\r\nexport function isFetchStart(boolean) {\r\n    return { \r\n        type: WEATHER_FETCH_IS_START,\r\n        isFetchStart: boolean\r\n    };\r\n}\r\n\r\nexport function isFetchError(error) {\r\n    return { \r\n        type: WEATHER_FETCH_ERROR,\r\n        isFetchError: error\r\n    };\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../images/icons/icons.css'\r\nimport './Weather.css';\r\nimport { connect } from \"react-redux\";\r\nimport { weatherFetchDataToday } from '../../store/actions/weather';\r\n\r\nclass Weather extends Component {\r\n\r\n  getWeatherCity = (event) => {\r\n    event.preventDefault();\r\n    this.props.fetchData(`https://api.openweathermap.org/data/2.5/forecast?q=${this.searchInput.value}&appid=68973503f94a54422e17c88b2935ebce&lang=ru&units=metric`);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const optionsDate = {\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      year: 'numeric'\r\n    }\r\n\r\n    return (\r\n      <div className='weather-container'>\r\n        <h1 className='title'>Погода</h1>       \r\n        <form className='search-form' onSubmit={ this.getWeatherCity }>\r\n          <label className='search-title'>\r\n            Введите название населённого пункта:\r\n          </label>\r\n          <div className='search-field'>\r\n            <input className='search-input' type=\"text\" ref={(input) => {this.searchInput = input}} />\r\n            <button className='search-button' type=\"submit\">Отправить</button>\r\n          </div>\r\n        </form>\r\n\r\n        {(this.props.isFetchStart) &&\r\n          <div className='preloader'></div>\r\n        }\r\n\r\n        {(this.props.isFetchError) &&\r\n          <h1 className='error-block'>{this.props.isFetchError}</h1>\r\n        }\r\n        \r\n        {(this.props.today && this.props.week) &&\r\n          (\r\n          <div className=\"weather-info\">\r\n            <div className='weather-card-now'>\r\n              <p className='weather-card-now__title'>Погода сейчас:</p>\r\n              \r\n              <p className='weather-card-now__text'>\r\n                {Math.round(this.props.today.main.temp)}°, \r\n                ощущается как {Math.round(this.props.today.main.feels_like)}°\r\n              </p>\r\n              <div className={`wi wi-100 icon-${this.props.today.weather[0].icon}`}></div>\r\n              <p className='weather-card-now__text'>{this.props.today.weather[0].description}</p>\r\n              <p className='weather-card-now__text'>Ветер: {this.props.today.wind.speed} м/с, \r\n              Влажность: {this.props.today.main.humidity}%, \r\n              Давление: {this.props.today.main.pressure} мм рт. ст.\r\n              </p>\r\n            </div>\r\n            <ul className='weather-cards-week'>\r\n              {this.props.week.map((day, index)=> {\r\n                return <li className='weather-card-week' key={index}>\r\n                  <p className='weather-card-week__title'>\r\n                    {new Date(day.dt_txt).toLocaleString('ru', optionsDate)}\r\n                  </p>\r\n                  <p className='weather-card-week__text'>Температура: {Math.round(day.main.temp)}° </p>\r\n                  <p className='weather-card-week__text'>Ощущается как: {Math.round(day.main.feels_like)}°</p>\r\n\r\n                  <div className={`wi wi-100 icon-${day.weather[0].icon}`}></div>\r\n                  <p className='weather-card-week__text'>{day.weather[0].description}</p>\r\n                  <p className='weather-card-week__text'>Ветер: {day.wind.speed} м/с</p>\r\n                  <p className='weather-card-week__text'>Влажность: {day.main.humidity}%</p>\r\n                  <p className='weather-card-week__text'>Давление: {day.main.pressure} мм рт. ст.</p>\r\n                </li>\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => state;\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchData: url => dispatch(weatherFetchDataToday(url))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\r\n","import { \r\n    weatherDataTodaySuccess,\r\n    weatherDataWeekSuccess,\r\n    isFetchStart,\r\n    isFetchError\r\n} from './actions'\r\nimport errorHandler from '../../utils/errorHandler'\r\n\r\nexport function weatherFetchDataToday(url) { \r\n    return (dispatch) => {\r\n        dispatch(isFetchStart(true))\r\n        dispatch(isFetchError(null))\r\n        fetch(url)\r\n            .then(res => {\r\n                dispatch(weatherDataTodaySuccess(null))\r\n                dispatch(weatherDataWeekSuccess(null))\r\n                if (res.status !== 200) {\r\n                    throw new Error(res.status)\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(weatherData => {\r\n                dispatch(weatherDataTodaySuccess(weatherData.list[0]))\r\n                dispatch(weatherDataWeekSuccess(\r\n                    weatherData.list.filter(day => \r\n                        day.dt_txt.includes(\"12:00:00\"))\r\n                        )\r\n                    )\r\n            })\r\n            .finally(weatherData => {\r\n                dispatch(isFetchStart(false))\r\n            })\r\n            .catch((err) => {\r\n                dispatch(isFetchError(errorHandler(err.message)))\r\n            });\r\n    }\r\n}\r\n","export default function errorHandler(errorNum) {\r\n    switch (errorNum) {\r\n        case '400':\r\n            return `Необходимо ввести название города`;\r\n        case '401':\r\n            return `Неверный токен`;\r\n        case '404':\r\n            return `Город не найден`;\r\n        case 'Failed to fetch':\r\n            return `Ошибка запроса`;\r\n        default:\r\n            return `Неизвестная ошибка`;\r\n      }\r\n}\r\n","import React from 'react';\r\nimport Weather from './components/Weather/Weather'\r\n\r\nfunction App() {\r\n  return (\r\n      <Weather />\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {};\r\n\r\nexport default initialState;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { weatherData } from './reducers/weatherData';\r\n\r\n\r\nconst store = createStore(\r\n    weatherData,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\n// store.subscribe(() => console.info('subscribe', store.getState()))\r\n\r\nexport default store;\r\n","import initialState from '../initialState';\r\nimport { \r\n    WEATHER_FETCH_DATA_TODAY_SUCCESS, \r\n    WEATHER_FETCH_DATA_WEEK_SUCCESS,\r\n    WEATHER_FETCH_IS_START,\r\n    WEATHER_FETCH_ERROR\r\n} from '../actions/actionsTypes';\r\n\r\nexport function weatherData(state = initialState, action) {\r\n    switch(action.type) {\r\n        case WEATHER_FETCH_DATA_TODAY_SUCCESS: \r\n        return {\r\n            ...state,\r\n            today: action.today\r\n        };\r\n        case WEATHER_FETCH_DATA_WEEK_SUCCESS: \r\n        return {\r\n            ...state,\r\n            week: action.week \r\n        };\r\n        case WEATHER_FETCH_IS_START: \r\n        return {\r\n            ...state,\r\n            isFetchStart: action.isFetchStart \r\n        };\r\n        case WEATHER_FETCH_ERROR: \r\n        return {\r\n            ...state,\r\n            isFetchError: action.isFetchError\r\n        };\r\n        \r\n        default: return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport store from './store/store'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}